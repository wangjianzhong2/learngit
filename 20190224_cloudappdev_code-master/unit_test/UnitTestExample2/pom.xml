<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mycompany.utest</groupId>
    <artifactId>UnitTestExample2</artifactId>
    <packaging>jar</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>UnitTestExample2</name>
    <url>http://maven.apache.org</url>
    <description>This is a JMockit Unit Test (using JUnit 4) example for Java.</description>

    <properties>
        <!-- Set compiler version -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>

        <!-- Set default encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Set JUnit version, used later in plug-in -->
        <junit.version>4.12</junit.version>
        <jmockit.version>1.44</jmockit.version>
    </properties>

    <dependencies>
        <!-- Unit Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JMockit -->
        <dependency>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <version>${jmockit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Apache Maven Eclipse Plugin (RETIRED)
            The Maven Eclipse Plugin is used to generate Eclipse IDE files 
            (*.classpath, *.project, *.wtpmodules and the .settings folder) for use with a project.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-eclipse-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <!-- Always download and attach dependencies source code -->
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>false</downloadJavadocs>
                </configuration>
            </plugin>

            <!-- Apache Maven Resources Plugin
            The Resources Plugin handles the copying of project resources to the output directory.
            There are two different kinds of resources: main resources and test resources.
            The difference is that the main resources are the resources associated to the main source 
            code while the test resources are associated to the test source code.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>resources</goal>
                            <goal>testResources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Apache Maven Site Plugin
            The Site Plugin is used to generate a site for the project. The generated site also 
            includes the project's reports that were configured in the POM.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/ 
            -->
            <!-- Note.
            To fix "mvn site" error "NoClassDefFoundError: org/apache/maven/doxia/siterenderer/DocumentContent" problem.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.7.1</version>
            </plugin>

            <!-- Maven Surefire Plugin
            The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/
            This Plugin has only one goal:
                surefire:test   #runs the unit tests of an application.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                    <argLine>
                        -javaagent:${settings.localRepository}/org/jmockit/jmockit/${jmockit.version}/jmockit-${jmockit.version}.jar
                    </argLine>
                    <!-- Note.
                    Add this in Eclipse VM Arguments while running unit test cases:
                    -javaagent:C:/Users/bobyuan/.m2/repository/org/jmockit/jmockit/1.44/jmockit-1.44.jar
                    -->
                    <!--
                    <excludes>
                        <exclude>DataTest.java</exclude>
                    </excludes>
                    <includes>
                        <include>DataCheck.java</include>
                    </includes>
                    -->
                </configuration>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <!-- Apache Maven Project Info Reports Plugin
            The Maven Project Info Reports plugin is used to generate reports information about the project.
            Normally, we take off the dependency report to save time.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-project-info-reports-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>

            <!-- Apache Maven Javadoc Plugin
            The Javadoc Plugin uses the Javadoc tool to generate javadocs for the specified project.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-javadoc-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <show>private</show>
                    <nohelp>true</nohelp>
                </configuration>
            </plugin>

            <!-- Maven JXR Plugin
            The JXR Plugin produces a cross-reference of the project's sources. 
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jxr-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>

            <!-- Apache Maven PMD Plugin. 
            The PMD Plugin allows you to automatically run the PMD code analysis tool on your project's 
            source code and generate a site report with its results. 
            It also supports the separate Copy/Paste Detector tool (or CPD) distributed with PMD.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-pmd-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.12.0</version>
                <configuration>
                    <skipEmptyReport>false</skipEmptyReport>
                </configuration>
            </plugin>

            <!-- Maven Surefire Report Plugin
            The Surefire Report Plugin parses the generated TEST-*.xml files under ${basedir}/target/surefire-reports 
            and renders them using DOXIA, which creates the web interface version of the test results.
            https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-report-plugin/
            This Plugin has these goals:
                mvn surefire-report:report       #generate Surefire unit test report, output to: target/site/surefire-report.html
                mvn surefire-report:report-only  #generate a unit test report without running all the unit tests again. 
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M3</version>
            </plugin>

            <!-- Cobertura Maven Plugin
            This plugin provides the features of Cobertura within the Maven 2 & 3 environment, 
            which gave you a coverage report for your unit tests.
            https://repo.maven.apache.org/maven2/org/codehaus/mojo/cobertura-maven-plugin/
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <!--
                    <instrumentation>
                        <ignores>
                            <ignore>com.example.boringcode.*</ignore>
                        </ignores>
                        <excludes>
                            <exclude>com/example/dullcode/**/*.class</exclude>
                            <exclude>com/example/**/*Test.class</exclude>
                        </excludes>
                    </instrumentation>
                    -->
                </configuration>
            </plugin>
        </plugins>
    </reporting>    
</project>
